def hash_fun(data, raw_data, buckets, support):    temp_list=[]    for each in data:        num=0;        #print set(each)        for items in range(len(raw_data)):            if set(each).issubset(set(raw_data[items])):                num+=1        temp_list.append([each, num])        print temp_list    pairsoutput = [temp_list[i][0] for i in range(len(temp_list)) if temp_list[i][1] >= support]    output=[[temp_list.index(temp_list[each]%buckets,temp_list[each][1]] for each in range(len(temp_list))]    print output    output = [[temp_list.index(temp_list[each]) % buckets, temp_list[each][1]] for each in range(len(temp_list))]    #print output    pairs_tmv =[[temp_list.index(temp_list[each]) % buckets, temp_list[each][0]] for each in range(len(temp_list))]    #print pairs_tmv    for j in range(len(output)):        for k in range(j + 1, len(output) - 1):            #print output[j][0]            if output[j][0] == output[k][0]:                output[k][1] = output[j][1] + output[k][1]                del (output[j])    output1 = []    for each in range(len(output)):        if output[each][1] >= support:            bitmap = 1            output1.append((output[each][0], bitmap))        pairs_output = []        for each in dict(output1):            for i in range(len(pairs_tmv)):                if pairs_tmv[i][0] == each:				    pairs_output.append(list(pairs_tmv[i][1]))        if len(pairsoutput) == 0:		return pairs_output, dict(output)	else:		#print(dict(output), '\n', sorted(pairsoutput), '\n')		return pairs_output, dict(output)