import numpy as npimport mathimport sysif __name__ == "__main__":        txtFile=sys.argv[1]        actual_file = sys.argv[2]        k=int(sys.argv[3])        n=int(sys.argv[4])        p=float(sys.argv[5])        data=[]        # mesh this array so that you will have all combinations        reader = np.loadtxt(txtFile,delimiter=',')        #print reader        for row in reader:            data.append(row)        data = np.asarray(data)        #clust_cnt=len(data)        cnt = len(data)        #print cnt        dendrogram=[]        dendrogram=map(lambda x: [x], range(cnt))        #k=int(sys.argv[2])        cent_indices=[]        new_dist_matrix =(np.sum((data[None,:] - data[:, None])**2, -1)**0.5)        np.fill_diagonal(new_dist_matrix, np.inf)        #new_dist_matrix=data        to_del_dend=[]        while(cnt > k):            i,j=np.unravel_index(np.argmin(new_dist_matrix),new_dist_matrix.shape)            #print i,j            new_dist_matrix[:,i]= np.minimum(new_dist_matrix[:,i],new_dist_matrix[:,j])            new_dist_matrix[i,:]= np.minimum(new_dist_matrix[i,:],new_dist_matrix[j,:])            new_dist_matrix = np.delete(new_dist_matrix, j, axis=0)            new_dist_matrix = np.delete(new_dist_matrix, j, axis=1)            np.fill_diagonal(new_dist_matrix, np.inf)            val=j            for l,m in enumerate(dendrogram):                if(l==i ):                    dendrogram[l].extend((dendrogram[j]))            del dendrogram[j]            cnt-=1        Points_Cluster=[]        Points_Cluster_nummmm=[]        all_clusters = [[] for i in range(k)]        REP_CNT=n        #print REP_CNT        cluster_lengths=[]        for i in range(len(dendrogram)):            for each_list in dendrogram[i]:                b=reader[each_list].tolist()                #Points_Cluster.append([b,i])                #print b                Points_Cluster_nummmm.append([i,b])                all_clusters[i].append(b)                Points_Cluster.append(b)        centroids=[]        cent=[]        for i in range(k):            x = np.sum(all_clusters[i],axis=0)/len(all_clusters[i])            x= np.around( x, decimals=6)            x=x.tolist()            #print x            centroids.append(x)        #print centroids        #print "centroids",centroids        REP_POINTS=[]        for each_list in list(all_clusters):            #print each_list            x,y=zip(*each_list)            x1_ind=np.argmin(x)            REP_POINTS.append(each_list[x1_ind])        print REP_POINTS        rep_cluster_dist=[]        if n>1:            for j in range(k):                dist1=[]                x=all_clusters[j]                for i in range(len(x)):                    dist1.append(np.sqrt(((REP_POINTS[j][0] - x[i][0] )**2) + ((REP_POINTS[j][1]- x[i][1])**2)))                snp=np.argmax(dist1)                REP_POINTS[j].extend(x[snp])            print REP_POINTS        representative_points=[]        for list3 in list(REP_POINTS):            representative_points.append([list3[j:j+2] for j in range(0, len(list3), 2)])        REP_CNT=REP_CNT-1        #print "rep",representative_points        if n >= 2:            pts=n-2            for a in range(2,n):                for i in range(len(all_clusters)):                    x = all_clusters[i]                    rep = representative_points[i]                    dist2=[]                    for k in range(0,pts):                        #rep2=rep[k]                        dist1 = []                        for j in range(len(x) ):                            dist1.append([(math.sqrt((rep[k][0] - x[j][0]) ** 2 ) + ( (rep[k][1] - x[j][1]) ** 2))])                        if k > 0 :                            dist2 = np.minimum(dist1,dist2)                            q = np.argmax( dist2 )                        else:                            dist2 = dist1                    representative_points[i].append( x[q] )                pts+=1for v in range(k):    for w in range(n):        print "Representative Points of Cluster",format(w)        print representative_points[w]        # #print representative_points[0],'\n',representative_points[1],'\n',representative_points[2]        #        # rep_points_1 = []        #        final_rep_points = []        for i in range(k):            representative_points[i]            cnt = 0            while cnt <= (k):                m = (float)(centroids[i][0] - representative_points[0])                nn = (float)(centroids[i][1] - representative_points[1])                rep_points_1.append([representative_points[i][0] + m*(p),representative_points[i][1] + nn*(p)])                #j = j+ len(clusters)                cnt +=1            final_rep_points.append(rep_points_1)        print final_rep_points        # out2 = np.genfromtxt(actual_file, delimiter=',')        # out2 = np.asarray(out2)        #        # # #        # # # minDist = 99999        # #        # #        # #        # #        # #        #        #        #