import numpy as npimport mathimport sysif __name__ == "__main__":        txtFile=sys.argv[1]        actual_file = sys.argv[2]        k=int(sys.argv[3])        n=int(sys.argv[4])        p=float(sys.argv[5])        outfile=sys.argv[6]        actual=[]        data=[]        # mesh this array so that you will have all combinations        actual_data = open(actual_file)        #print reader        file_out=open(outfile,"w")        reader = np.loadtxt(txtFile,delimiter=',')        #print reader        for row in reader:            data.append(row)        data = np.asarray(data)        #clust_cnt=len(data)        cnt = len(data)        #print k        #print cnt        dendrogram=[]        dendrogram=map(lambda x: [x], range(cnt))        #k=int(sys.argv[2])        cent_indices=[]        new_dist_matrix =(np.sum((data[None,:] - data[:, None])**2, -1)**0.5)        np.fill_diagonal(new_dist_matrix, np.inf)        #new_dist_matrix=data        to_del_dend=[]        while(cnt > k):            i,j=np.unravel_index(np.argmin(new_dist_matrix),new_dist_matrix.shape)            #print i,j            new_dist_matrix[:,i]= np.minimum(new_dist_matrix[:,i],new_dist_matrix[:,j])            new_dist_matrix[i,:]= np.minimum(new_dist_matrix[i,:],new_dist_matrix[j,:])            new_dist_matrix = np.delete(new_dist_matrix, j, axis=0)            new_dist_matrix = np.delete(new_dist_matrix, j, axis=1)            np.fill_diagonal(new_dist_matrix, np.inf)            val=j            for l,m in enumerate(dendrogram):                if(l==i ):                    dendrogram[l].extend((dendrogram[j]))            del dendrogram[j]            #print new_dist_matrix            cnt-=1        Points_Cluster=[]        Points_Cluster_nummmm=[]        all_clusters = [[] for i in range(k)]        REP_CNT=n        #print REP_CNT        cluster_lengths=[]        for i in range(len(dendrogram)):            for each_list in dendrogram[i]:                b=reader[each_list].tolist()                all_clusters[i].append(b)                Points_Cluster.append(b)        centroids=[]        for i in range(k):            x = np.sum(all_clusters[i],axis=0)/len(all_clusters[i])            x= np.around( x, decimals=6)            x=x.tolist()            centroids.append(x)        ##print all_clusters        representative_points=[]        for j in range(0,k):            rep=[]            min_val=sys.float_info.max            each_clu=all_clusters[j]            rep_l=()            for pt in each_clu:                if pt[0]==min_val:                    if point[1]<rep_l[1]:                        repl_l = pt                        print repl_l                elif pt[0] < min_val:                    min_val = pt[0]                    rep_l = pt            rep.append(rep_l)            rep = np.array(rep)            #print rep            each_clu=np.array(each_clu)            for i in range(n-1):                dis_list=[]                for point in rep:                    dis_list.append(np.linalg.norm(each_clu-point,keepdims=True,axis=1).tolist())                point_from_all_clu= [each_clu[np.argmax(np.array(dis_list).min(0))]]                rep=np.append(rep,point_from_all_clu, axis=0)            representative_points.append(rep.tolist())        print "Representative Points of Clusters"        for t in range(k):            print representative_points[t]        final_rep_points = [[] for i in range(k)]        #print final_rep_points        rep_points_1=[]        for i in range(len(centroids)):            temp_rep=representative_points[i]            cnt = 0            while cnt < n:                each_rep=temp_rep[cnt]                m0 = (float)(centroids[i][0] - each_rep[0])                m1 = (float)(centroids[i][1] - each_rep[1])                new_rep=each_rep[0] + m0*(p),each_rep[1] + m1*(p)                list_rep=list(new_rep)                final_rep_points[i].append(list_rep)                cnt +=1        #print final_rep_points[0],"\n",final_rep_points[1], "\n",final_rep_points[2]        #now using the full datta to assign the clusters        def distance(v1, v2):            return np.sqrt(np.sum((v1 - v2) ** 2))        for each_point in actual_data:            each_point = each_point.strip()            each_point=each_point.split(",")            each_point=map(float,each_point)            minimum_point= sys.maxsize            for t in range(len(final_rep_points)):                temp = final_rep_points[t]                for q in temp:                    result= distance(np.array(each_point),np.array(q))                    if result < minimum_point:                        minimum_point=result                        cluster_number= t            file_out.write(str(each_point[0])+","+str(each_point[1])+","+str(cluster_number)+'\n')file_out.close()