import numpy as npimport sysfrom scipy.spatial.distance import pdist, squareformtxtFile=sys.argv[1]if __name__ == "__main__":        data=[]        # mesh this array so that you will have all combinations        raw_data = open("sample_data.txt", 'r')        reader = np.loadtxt(raw_data,delimiter=',')        print reader        for row in reader:            data.append(row)        data = np.asarray(data)        # m, n = np.meshgrid(data, data)        # print m,n        # get the distance via the norm        #out = abs(m-n)        import numpy as np        # from scipy.spatial.distance import pdist, squareform        #        # # Create the following array where each row is a point in 2D space:        # # [[0 1]        # #  [1 0]        # #  [2 0]]        #        # # Compute the Euclidean distance between all rows of x.        # # d[i, j] is the Euclidean distance between x[i, :] and x[j, :],        # # and d is the following array:        # # [[ 0.          1.41421356  2.23606798]        # #  [ 1.41421356  0.          1.        ]        # #  [ 2.23606798  1.          0.        ]]        # d = squareform(pdist(data, 'euclidean'))        # print(d)        clust_cnt=len(data)        cnt = 100        dendrogram=map(lambda x: [x], range(clust_cnt))        k=int(sys.argv[2])        cent_indices=[]        #new_dist_matrix=np.triu(out)        #print new_1        #new_dist_matrix = np.sqrt((np.square(data[:,np.newaxis]-data[np.newaxis,:]).sum(axis=2)))        #print dist        new_dist_matrix =(np.sum((data[None,:] - data[:, None])**2, -1)**0.5)        #print new_dist_matrix        #new_dist_matrix=[[0,0.8,0.2,0.1],[0.8,0,0.9,0.7],[0.2,0.9,0,0.6],[0.1,.7,0.6,0]]        #new_dist_matrix=np.asarray(new_dist_matrix)        #print new_dist_matrix        np.fill_diagonal(new_dist_matrix, np.inf)        #new_dist_matrix=data        to_del_dend=[]        while(cnt > k):            i,j=np.unravel_index(np.argmin(new_dist_matrix),new_dist_matrix.shape)            print i,j            #if new_dist_matrix[i][j]<new_dist_matrix[j][i]:            new_dist_matrix[i,:]= np.minimum(new_dist_matrix[i,:],new_dist_matrix[j,:])            new_dist_matrix[:,i]= np.minimum(new_dist_matrix[:,i],new_dist_matrix[:,j])            np.fill_diagonal(new_dist_matrix, np.inf)            new_dist_matrix = np.delete(new_dist_matrix, j, axis=0)            new_dist_matrix = np.delete(new_dist_matrix, j, axis=1)            val=j            for n,m in enumerate(dendrogram):                #print n                if(n==i ):                    dendrogram[n].extend((dendrogram[j]))                    #print dendrogram[j]            del dendrogram[j]            #print new_dist_matrix.shape            #print len(dendrogram)            print dendrogram            #to_del_dend.append(j)            cnt-=1            print new_dist_matrix            #print clusters        #elif new_dist_matrix[i]>new_dist_matrix[j]:        #     val=i        #     for n,m in enumerate(dendrogram):        #         if(n==j ):        #             print dendrogram[i]        #        #             dendrogram[n].extend((dendrogram[i]))        #     del dendrogram[i]        #        #        #     new_dist_matrix[j,:]= np.minimum(new_dist_matrix[i,:],new_dist_matrix[j,:])        #     new_dist_matrix[:,j]= np.minimum(new_dist_matrix[:,i],new_dist_matrix[:,j])        #     np.fill_diagonal(new_dist_matrix, np.inf)        #        #     new_dist_matrix = np.delete(new_dist_matrix, i, axis=0)        #     new_dist_matrix = np.delete(new_dist_matrix, i, axis=1)        #        #     #print new_dist_matrix.shape        #     #print len(dendrogram)        #     print dendrogram        #        #     #to_del_dend.append(j)        # #        #        # cnt-=1        print new_dist_matrix        print dendrogram[0],'\n', dendrogram[1],'\n',dendrogram[2]        print len(dendrogram[0]),'\n', len(dendrogram[1]),'\n',len(dendrogram[2])        # cluster1=dendrogram[0]        # cluster2=dendrogram[1]        # cluster3=dendrogram[2]        Points_Cluster=[]        #print l        # for i in range(len(cluster1)):        #     Points_Cluster1.append(reader[cluster1[i]])        # for i in range(len(cluster1)):        #     Points_Cluster1.append(reader[cluster2[i]])        # for i in range(len(cluster1)):        #     Points_Cluster1.append(reader[cluster3[i]])        list1=[[1],[3,3,4,5],[1,2,3,4,5]]        for i in range(len(list1)):            for each_list in list1[i]:                    b=reader[each_list].tolist()                    Points_Cluster.append(b)        print len(Points_Cluster)