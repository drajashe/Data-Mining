import sysimport osimport itertoolsfrequent_item_list = []bucket_size = 0frq_sets_all=[]singleton_set={}support=0.0def generateHash(a,b,each_subset):     #print each_subset     # for i in range(len(each_subset)):     x,y = each_subset     #print x,y     total=(int(x)+int(y))     #print total     return total % bucket_sizedef generateBitMap(hashTable):	bitmap = 0	for k,v in hashTable.iteritems():		if v >= int(support):			bitmap = bitmap | 1<<int(k)	return bitmap#takes : list of baskets. For ex: [['a','d'],['f','g']]#return : hashTabledef generateHashTable(a,b,baskets, size):	hashTable={}	for line in baskets:		subsets = []		for subset in itertools.combinations(line, size):	 		subsets.append(subset)		for ele in subsets:			hashKey = generateHash(a,b,ele)			hashTable.setdefault(hashKey,0)			hashTable[hashKey]+=1	return hashTabledef generateFrequentItemsets(baskets,size,bitmap,previousFrequentItemsets):	frequentItemsetsCandidates ={}	result=[]	for line in baskets:		for subset in itertools.combinations(line, size):			count = 0			temp = itertools.combinations(subset, size-1)			for item in temp:				if item in previousFrequentItemsets:					count+=1			if bitmapLookup(bitmap,list(subset)) and count==len(list(temp)):				frequentItemsetsCandidates.setdefault(subset,0)				frequentItemsetsCandidates[subset] +=1	for k,v in frequentItemsetsCandidates.iteritems():		if int(v)>=support:			result.append(list(k))	return sorted(result)def bitmapLookup(bitmap,itemSet):	hashValue = 1<<int(generateHash(a,b,itemSet))	return True if hashValue & bitmap != 0 else Falsedef generateFrequentSingletons(baskets):	d={}	result=[]	for line in baskets:		for ele in line:			d.setdefault(ele,0)			d[ele]+=1	for k,v in d.iteritems():		if v>=int(support):			result.append(k)	return sorted(result)if __name__ == '__main__':        input_file = sys.argv[1]        a = sys.argv[2]        b = sys.argv[3]        support = sys.argv[4]        bucket_size = sys.argv[5]        foldername=sys.argv[6]        a=int(a)        b=int(b)        support = int(support)        bucket_size = int(bucket_size)        path= foldername        #print foldername        if not os.path.exists(path):            os.makedirs(path)        baskets=[]        fil=open(input_file,'r')        #reading input from file        for transaction in fil:            line = transaction.strip().split(',')            line = list(map(int, line))            baskets.append(sorted(line))        size=1; hashTable={}        frequentItemsets= generateFrequentSingletons(baskets)        bitmap=0;previousFrequentItemsets=[]        while True:			if size==1:				frequentItemsets= generateFrequentSingletons(baskets)				print (frequentItemsets); print			else:				bitmap = generateBitMap(hashTable)				previousFrequentItemsets=frequentItemsets				frequentItemsets= generateFrequentItemsets(baskets,size,bitmap,previousFrequentItemsets)				print (frequentItemsets); print			size +=1			hashTable = generateHashTable(a,b,baskets, size)			if len(frequentItemsets)==0:				 	sys.exit()			print (hashTable);            #            # filename2 = 'Candidate_pairs.txt'            # cand_file= open(os.path.join(path, filename2), "w")            # for items in candidate_item_set:            #     cand_file.write(str(items)+'\n')            # cand_file.close()            #            #            # filename1 = 'frequent_items.txt'            # frq_file = open(os.path.join(path, filename1), "w")            # for pairs in frq_sets_all:            #     for all in pairs:            #         frq_file.write(str(all))            #         frq_file.write('\n')            # frq_file.close()            # #finding the FPR            # num_of_frequent_buckets=            # total_num_of_buckets= bucket_size            # FPR =0            # FPR= num_of_frequent_buckets/total_num_of_buckets