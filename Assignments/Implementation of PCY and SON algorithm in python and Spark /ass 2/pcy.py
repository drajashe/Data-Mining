import sysfrom itertools import combinationsdef count_items(data,support):    freq_items={}    for each_line in data:        for each_items in each_line:            freq_items[each_items]=freq_items.get(each_items,0)+1    for each in freq_items.keys():        if freq_items[each]<support:            del(freq_items[each])    print(sorted(list(freq_items)))    return sorted(list(freq_items))def find_pairs(data, num):	return list(combinations(data,num))# def count_more_pairs(data, raw_data, num):#     candidate_raw_morepairs = list(combinations(data, num))#     candidate_items_3=[]#     for i in range(len(candidate_raw_morepairs)):#         count=0#         for j in range(len(raw_data)):#             if set(candidate_raw_morepairs[i]).issuperset(set(raw_data[j])):#                 count+=1#         if count > (num-1):#             candidate_items_3.append(sorted(candidate_raw_morepairs[i]))#     return candidate_items_3def hash_fn( candid_pairs,baskets,buckets,support):        temp =[]        for each in candid_pairs:            #print each            num=0            for items in range(len(baskets)):                if set(each).issubset(set(baskets[items])):                    num+=1            temp.append([each,num])            #print temp        pairsout= [temp[i][0] for i in range(len(temp)) if temp[i][1]>=support]        #print pairsout        output =[[temp.index(temp[each]) % buckets,temp[each][1]] for each in range(len(temp))]        print output        pairs= [[temp.index(temp[each]) % buckets,temp[each][0]] for each in range(len(temp))]        for j in range(len(output)):            for k in range(j+1,len(output)-1):                if output[j][0] == output[k][0] :                    output[k][1]=output[j][1]+output[k][1]                    del(output[j])        out1=[]        for each in range(len(output)):            if output[each][1] >= support:                bitmap=1                out1.append((output[each][0],bitmap))        pairs_out=[]        for each in dict(out1):            for i in range(len(pairs)):                if pairs[i][0] ==each:                    pairs_out.append(list(pairs[i][1]))        if len(pairs_out) == 0:            return pairs_out, dict(output)        else:            print(dict(output),'\n',sorted(pairs_out),'\n')            return pairs_out, dict(output)#main to read the file and prg inputsif __name__ == '__main__':    #support_S = int(sys.argv[5])    support_S =25891    #buckets_N = int(sys.argv[4])    buckets_N = 10    inp_file = open("baskets.txt")    baskets = []    #reading input and transforming    inp_file_data = inp_file.readlines()    for data in inp_file_data:        tmp_data = data.strip().split(",")        baskets.append(sorted(tmp_data))    #print baskets    sorted_items = count_items(baskets, support_S)    #print (sorted_items)    candidate_raw_pairs = find_pairs(sorted_items, 2)    #print candidate_raw_pairs    for num in range(0, len(sorted_items)):        candidate_pairs, bitmap = hash_fn(candidate_raw_pairs, baskets, buckets_N, support_S)        if len(candidate_pairs) == 0:            break;        # else:        #     candidate_raw_pairs = count_more_pairs(sorted_items, candidate_raw_pairs, num)